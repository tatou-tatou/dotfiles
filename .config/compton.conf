#################################
#
# GLX backend
#
#################################

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
backend = "glx";

glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
# but a 20% increase when only 1/4 is.
# My tests on nouveau show terrible slowdown.
# Useful with --glx-swap-method, as well.
glx-copy-from-front = true;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# My tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
#glx-use-copysubbuffermesa = true;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
# Recommended if it works.
glx-no-rebind-pixmap = true;


# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
glx-swap-method = "undefined";

## To fix lag with nvidia driver and glx
xrender-sync = true;
xrender-sync-fence = true;

############################
#
# Misc
#
############################

# Specify refresh rate of the screen.
# If not specified or 0, compton will try detecting this with X RandR extension.
        refresh-rate = 60;

# Set VSync method. VSync methods currently available:
# none: No VSync
# drm: VSync with DRM_IOCTL_WAIT_VBLANK. May only work on some drivers.
# opengl: Try to VSync with SGI_video_sync OpenGL extension. Only work on some drivers.
# opengl-oml: Try to VSync with OML_sync_control OpenGL extension. Only work on some drivers.
# opengl-swc: Try to VSync with SGI_swap_control OpenGL extension. Only work on some drivers. Works only with GLX backend. Known to be most effective on many drivers. Does not actually control paint timing, only buffer swap is affected, so it doesn’t have the effect of --sw-opti unlike other methods. Experimental.
# opengl-mswc: Try to VSync with MESA_swap_control OpenGL extension. Basically the same as opengl-swc above, except the extension we use.
# (Note some VSync methods may not be enabled at compile time.)
        #vsync = "opengl";
        vsync = "opengl-swc";

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
        #dbe = true;
# Painting on X Composite overlay window. Recommended.
        paint-on-overlay = true;

# Limit compton to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
# unless you wish to specify a lower refresh rate than the actual value.
        sw-opti = false;

# Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
# paint-on-overlay may make the flickering less obvious.
        unredir-if-possible = false;

# Specify a list of conditions of windows that should always be considered focused.
        focus-exclude = [ ];

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
        detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
        detect-client-leader = true;






############################
#
# Réglages
#
############################

# Ombre
shadow = true;

shadow-radius = 2;
shadow-offset-x = -3; # To center the shadow: offset = -(1.5 x radius)
shadow-offset-y = -3;
shadow-opacity = 0.3;

no-dnd-shadow = true;  # no drag-and-drop shadow
no-dock-shadow = false;
clear-shadow = true;   # zero the shadow's mask behind the window

# Transparence
#inactive-opacity = 0.9;
#frame-opacity = 0.9

# Fading
fading = true;
fade-in-step = 0.05;		# Opacity change between steps while fading in. (default 0.028).
fade-out-step = 0.05;		# Opacity change between steps while fading out. (default 0.03).
fade-delta = 4;		# The time between steps in a fade in milliseconds. (default 10).

# Exclusions
shadow-exclude = [ "window_type = 'dropdown_menu'", "window_type = 'popup_menu'", "n:e:Plank", "g:e:Conky", "n:w:*Firefox*", "class_g = 'Plank'", "class_g = 'dzen'", "name = 'neko'", "name = 'dzen slave'", "_BSPWM_FLOATING_WINDOW:32c = 0" ];

# Invisible blank window
opacity-rule = [ 
"0:class_g *= 'NO_SHADOW'"
];
