#!/bin/sh
#
# not-stat OPTION ["STRING"]
#
#  Kinda works like statnot, except it does not use libnotify and it's not written in
# python:
#  - Send a pre-defined notification to a fifo with a fitting icon. The fifo is meant
# to be read by lemonboy's bar (see the panel-skeleton script).
#  - Every notifications are temporary and get replaced by the current mpd song
# after a certain amount of time (3 seconds by default).
#  - Currently, volume and battery icons change their shape according to the
# respective value of what they represent.
#  - To be used with the modified MonteCarlo font in my Monégasque repo (otherwise, you 
# will not have any icons).
#
#  I wrote this to have fun and to waste time, I would not recommend anyone else to
# use it. If you want notifications in your panel, tweak statnot to work with
# something else than with dwm. It's very easy to do and probably much better, as
# statnot is a true, full featured, notification daemon.
#

#
# /!\ FOR THE COUNTDOWN TO WORK PROPERLY /!\
#  Always use not-stat like this: 
#
#     pkill not-stat ; not-stat -<x> &
#
#  Else the countdown will keep going and the notification will get back to the music before the latest countdown is finished
#


##### Settings: #####

# Countdown in seconds
countdown=3

# FIFO
fifo="/tmp/panel-fifo"

# Character used by the bspwm panel script to know where to put the notification (see the bspwmpanel-bar script for more details)
premessage="m"

# Colors
. panel-settings

# What happens when you click on the icon or on its label
execute="panel-monitor &"
text_execute="mpc toggle > /dev/null &"

#####################

bld=$'\e[1m'
rst=$'\e[0m'

while getopts ":mbBdrvVMh" flags; do
	case $flags in
	m)
		icon="$(mpc | grep -E 'playing|paused' | cut -d'[' -f2 | cut -d']' -f1 | sed 's/paused//g' | sed 's/playing//g')"
		message=" $(mpc current -f '%title%|%file%')"
		if [ "$message" = " " ];then
			icon=""
			message=" Nothing is playing"
		fi
	;;
	b)
		dzenstatus=$(cat ~/.panel/PID/dzen-submenu.pid)
		dzenstatus="${dzenstatus:0:2}"
		if [ "$dzenstatus" = "Sc" ]; then
			dzen-submenu-content Sc &
		fi

		icon=""
		message=" Backlight $(cat /sys/devices/virtual/backlight/apple_backlight/brightness)"
	;;
	B)
		icon=""
		message=" Keyboard $(cat /sys/class/leds/smc::kbd_backlight/brightness)"
	;;
	d)
		icon=""
		message=$2
	
	;;
	r)
		percent=$(acpi -b | cut -s -d' ' -f4 | cut -s -d'%' -f1)
		message="$(acpi -b | cut -s -d',' -f3)"

		if [ ! -z "$message" ]
		then
			if [ $(echo "$percent > 89" | bc) == 1 ]
			then
				icon=""
			elif [ $(echo "$percent > 74" | bc) == 1 ]
			then
				icon=""
			elif [ $(echo "$percent > 49" | bc) == 1 ]
			then
				icon=""
			elif [ $(echo "$percent > 24" | bc) == 1 ]
			then
				icon=""
			else
				icon=""
			fi
		else
			icon=""
			message=" Full"
		fi

	;;
	v)
		dzenstatus=$(cat ~/.panel/PID/dzen-submenu.pid)
		dzenstatus="${dzenstatus:0:2}"
		if [ "$dzenstatus" = "Vp" ]; then
			dzen-submenu-content Vp &
		fi

		valeur_volume="$(amixer -q | grep -A5 PCM | grep '%' | cut -d'[' -f2 | cut -d'%' -f1)"
		if [ "$(amixer -q | grep -m 5 on | cut -sd'[' -f4 | cut -d']' -f1)" == "off" ]
		then
			icon=" "
		elif [ $valeur_volume -eq 0 ]
		then
			icon=" "
		elif [ $valeur_volume -eq 100 ]
		then
			icon=""
		elif [ $(echo "$valeur_volume > 49" | bc) == 1 ]
		then
			icon=""
		else
			icon=""
		fi

		message=" Volume $valeur_volume"
	;;
	V)
		dzenstatus=$(cat ~/.panel/PID/dzen-submenu.pid)
		dzenstatus="${dzenstatus:0:2}"
		if [ "$dzenstatus" = "Vm" ]; then
			dzen-submenu-content Vm &
		fi

		valeur_volume="$(amixer -q | grep -A5 Master | grep '%' | cut -d'[' -f2 | cut -d'%' -f1)"
		if [ "$(amixer -q | grep -m 5 on | cut -sd'[' -f4 | cut -d']' -f1)" == "off" ]
		then
			icon=" "
		elif [ $valeur_volume -eq 0 ]
		then
			icon=" "
		elif [ $valeur_volume -eq 100 ]
		then
			icon=""
		elif [ $(echo "$valeur_volume > 49" | bc) == 1 ]
		then
			icon=""
		else
			icon=""
		fi

		message=" Master $valeur_volume"
	;;
	M)
		icon="$(amixer -q | grep -m 5 on | cut -sd'[' -f4 | cut -d']' -f1 | sed 's/on//g' | sed 's/off/ /g')"
		message=" $(amixer -q | grep -m 5 on | cut -sd'[' -f4 | cut -d']' -f1 | sed 's/on/Not /g' | sed 's/off//g')Muted"
	;;
	h) #help
			echo -e "Usage:"
			echo -e "  not-stat [OPTION] [MESSAGE]"
			echo ""
			echo "Display notifications on the top panel with various icons. After 3 seconds of inactivity, notifications get replaced by the current mpd song."
			echo ""
			echo -e "Options${rst}:"
			echo -e "   ${bld}-m${rst}                 Currently played music."
			echo -e "   ${bld}-b${rst}                 Screen backlight."
			echo -e "   ${bld}-B${rst}                 Keyboard backlight."
			echo -e "   ${bld}-d${rst}                 To use with a [MESSAGE]."
			echo -e "   ${bld}-r${rst}                 Remaining battery time."
			echo -e "   ${bld}-v${rst}                 PCM volume in percent."
			echo -e "   ${bld}-V${rst}                 Master volume in percent."
			echo -e "   ${bld}-M${rst}                 Mute/Not mute."
			echo -e "   ${bld}-h${rst}                 Display this help."

			exit
        ;;	
	esac
done



###
#
# Send the message to the panel.
#
###

echo -E "$premessage" "%{B$bg_icons}%{F$fg_icons}%{A:$execute:} $icon %{A}%{B$bg_notifications}%{A:$text_execute:} %{F$fg_squares}%{F$fg_notifications}$message %{A}%{B-}%{F-}" > $fifo


sleep $countdown

icon="$(mpc | grep -E 'playing|paused' | cut -d'[' -f2 | cut -d']' -f1 | sed 's/paused//g' | sed 's/playing//g')"
message=" $(mpc current -f '%title%|%file%')"
if [ "$message" = " " ];then
	icon=""
	message=" Nothing is playing"
fi

echo -E "$premessage" "%{B$bg_icons}%{F$fg_icons}%{A:$execute:} $icon %{A}%{B$bg_notifications}%{A:$text_execute:} %{F$fg_squares}%{F$fg_notifications}$message %{A}%{B-}%{F-}" > $fifo
