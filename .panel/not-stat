#!/bin/sh
#
# not-stat OPTION ["STRING"]
#
# /!\ FOR THE COUNTDOWN TO WORK PROPERLY /!\
#  Always use not-stat like this: 
#
#     pkill not-stat ; not-stat <Xx> &
#
#  Else the countdown will keep going and the notification will get back to the
# music before the latest countdown is finished
#


######## Settings: ########

# Countdown in seconds
countdown=3

# FIFO
fifo="/tmp/panel-fifo"

# Character used by the panel-skeleton script to know where to put the notification
premessage="m"

# Colors
. panel-settings

# What happens when you click on the icon or on its label
## If you want only one command:
# execute="your command"
## If you want two commands (the second one is executed with a right click)
# execute="command1 : command2"
execute="panel-monitor : panel-music"
text_execute="mpc toggle > /dev/null & : run-or-raise ncmpcpp &"

###########################

bld=$'\e[1m'
rst=$'\e[0m'

case $1 in
    Mu) ## Music ##
        icon="$(mpc | grep -E 'playing|paused' | cut -d'[' -f2 | cut -d']' -f1 | sed 's/paused//g' | sed 's/playing//g')"
        message=" $(mpc current -f '%title%|%file%')"
        if [ "$message" = " " ];then
            icon=""
            message=" (Nothing!)"
        fi
    ;;
    Sc) ## Screen brightness ##

        # Check if the slider popup is opened and update its content
        dzenstatus=$(cat $dzen_popup_path)
        dzenstatus="${dzenstatus:0:2}"
        if [ "$dzenstatus" = "$1" ]; then
            dslider-content $1 &
        fi

        icon=""
        message=" Brightness $(cat $brightness_path)"
    ;;
    Kb) ## Keyboard layout ##
        currentLayout=$(setxkbmap -print -v 7 | grep layout)
        currentLayout=${currentLayout: -2}
        
        # Message to send depending on the current layout
        fr="AZERTY"
        us="QWERTY"

        icon=""
        message=" ${!currentLayout}"
    ;;
    Kl) ## Keyboard brightness ##
        icon=""
        message=" Keyboard $(cat $keyboard_path)"
    ;;
    Me) ## Message ##
        icon=""
        message=$2
    ;;
    Ba) ## Remaining battery time ##
        percent=$(acpi -b | cut -s -d' ' -f4 | cut -s -d'%' -f1)
        message="$(acpi -b | cut -s -d',' -f3)"

        if [ ! -z "$message" ]
        then
            if [ $(echo "$percent > 89" | bc) == 1 ]
            then
                icon=""
            elif [ $(echo "$percent > 74" | bc) == 1 ]
            then
                icon=""
            elif [ $(echo "$percent > 49" | bc) == 1 ]
            then
                icon=""
            elif [ $(echo "$percent > 24" | bc) == 1 ]
            then
                icon=""
            else
                icon=""
            fi
        else
            icon=""
            message=" Full"
        fi
    ;;
    Vm) ## Master volume ##

        # Check if the slider popup is opened and update its content
        dzenstatus=$(cat $dzen_popup_path)
        dzenstatus="${dzenstatus:0:2}"
        if [ "$dzenstatus" = "$1" ]; then
            dslider-content $1 &
        fi

        volumeValue="$(amixer -q | grep -A5 Master | grep '%' | cut -d'[' -f2 | cut -d'%' -f1)"
        if [ "$(amixer -q | grep -m 5 on | cut -sd'[' -f4 | cut -d']' -f1)" == "off" ]
        then
            icon=" "
        elif [ $volumeValue -eq 0 ]
        then
            icon=" "
        elif [ $volumeValue -eq 100 ]
        then
            icon=""
        elif [ $(echo "$volumeValue > 49" | bc) == 1 ]
        then
            icon=""
        else
            icon=""
        fi

        message=" Volume ${volumeValue}"
    ;;
    Mt) ## Muted ##
        icon="$(amixer -q | grep "\[on\]\|\[off\]" | head -n 1 | cut -sd'[' -f3 | cut -d']' -f1 | sed 's/on//g' | sed 's/off/ /g')"
        message=" $(amixer -q | grep "\[on\]\|\[off\]" | head -n 1 | cut -sd'[' -f3 | cut -d']' -f1 | sed 's/on/Not /g' | sed 's/off//g')Muted"
    ;;
    *) ## Error message ##
        icon="  "
        message=" Wrong not-stat command."
        countdown=10
    ;;
esac

###########################

#
# Send the message to the panel.
#

echo -E "$premessage" "%{B$bg_icons}%{F$fg_icons}%{A:$execute:} $icon %{A}%{B$bg_notifications}%{A:$text_execute:} %{F$fg_squares}%{F$fg_notifications}$message %{A}%{B-}%{F-}" > $fifo


sleep $countdown

icon="$(mpc | grep -E 'playing|paused' | cut -d'[' -f2 | cut -d']' -f1 | sed 's/paused//g' | sed 's/playing//g')"
message=" $(mpc current -f '%title%|%file%')"
if [ "$message" = " " ];then
    icon=""
    message=" (Nothing!)"
fi

echo "$premessage" "%{B$bg_icons}%{F$fg_icons}%{A:$execute:} $icon %{A}%{B$bg_notifications}%{A:$text_execute:} %{F$fg_squares}%{F$fg_notifications}$message %{A}%{B-}%{F-}" > $fifo
