####################################################
## this is example configuration file, copy it to ##
## ~/.ncmpcpp/config and set up your preferences  ##
####################################################
#
##### directories ######
##
## Directory for storing ncmpcpp related files.
## Changing it is useful if you want to store
## everything somewhere else and provide command
## line setting for alternative location to config
## file which defines that while launching ncmpcpp.
##
#
#ncmpcpp_directory = "~/.ncmpcpp"
#
##
## Directory for storing downloaded lyrics. It
## defaults to ~/.lyrics since other MPD clients
## (eg. ncmpc) also use that location.
##
#
#lyrics_directory = "~/.lyrics"
#
##### connection settings #####
#
## set it in order to make tag editor and renaming files work properly
#
mpd_host = "localhost"
#
mpd_port = "6600"
#
mpd_music_dir = "~/Music"
#
mpd_connection_timeout = "5"
#
mpd_crossfade_time = "5"
#
##### music visualizer #####
##
## Note: In order to make music visualizer work you'll
## need to use mpd fifo output, whose format parameter
## has to be set to 44100:16:1 for mono visualization
## or 44100:16:2 for stereo visualization. Example
## configuration (it has to be put into mpd.conf):
##
## audio_output {
##        type            "fifo"
##        name            "my_fifo"
##        path            "/tmp/mpd.fifo"
##        format          "44100:16:2"
## }
##
#
##
## If you set format to 44100:16:2, make it 'yes'.
##
#
visualizer_in_stereo = "no"
#
visualizer_fifo_path = "/tmp/mpd.fifo"
#
##
## Note: Below parameter is needed for ncmpcpp
## to determine which output provides data for
## visualizer and thus allow syncing between
## visualization and sound as currently there
## are some problems with it.
##
# spectrum/wave
visualizer_output_name = "my_fifo"
#
##
## Note: Below parameter defines how often ncmpcpp
## has to "synchronize" visualizer and audio outputs.
## 30 seconds is optimal value, but if you experience
## synchronization problems, set it to lower value.
## Keep in mind that sane values start with >=10.
##
#
visualizer_sync_interval = "30"
#
##
## Note: To enable spectrum frequency visualization
## you need to compile ncmpcpp with fftw3 support.
##
#
visualizer_type = "spectrum"
#
#visualizer_look = ""
visualizer_look = ""
#
##### system encoding #####
##
## ncmpcpp should detect your charset encoding
## but if it failed to do so, you can specify
## charset encoding you are using here.
##
## Note: You can see whether your ncmpcpp build
## supports charset detection by checking output
## of `ncmpcpp --version`.
##
## Note: Since MPD uses utf8 by default, setting
## this option makes sense only if your encoding
## is different.
##
#
system_encoding = "utf8"
#
##### delays #####
#
## delay after playlist highlighting will be disabled (0 = don't disable)
#
playlist_disable_highlight_delay = "1"
#
## defines how long various messages are supposed to be visible
#
message_delay_time = "1"
#
##### song format #####
##
## for song format you can use:
##
## %l - length
## %f - filename
## %D - directory
## %a - artist
## %A - album artist
## %t - title
## %b - album
## %y - date
## %n - track number (01/12 -> 01)
## %N - full track info (01/12 -> 01/12)
## %g - genre
## %c - composer
## %p - performer
## %d - disc
## %C - comment
## %P - priority
## $R - begin right alignment
##
## you can also put them in { } and then it will be displayed
## only if all requested values are available and/or define alternate
## value with { }|{ } eg. {%a - %t}|{%f}
##
## Note: If you want to set limit on maximal length of a tag, just
## put the appropriate number between % and character that defines
## tag type, e.g. to make album take max. 20 terminal cells, use '%20b'.
##
## Note: Format that is similar to "%a - %t" (i.e. without any additional
## braces) is equal to "{%a - %t}", so if one of the tags is missing,
## you'll get nothing.
##
## text can also have different color than the main window has,
## eg. if you want length to be green, write $3%l$9
##
## available values:
##
## - 0 - default window color (discards all other colors)
## - 1 - black
## - 2 - red
## - 3 - green
## - 4 - yellow
## - 5 - blue
## - 6 - magenta
## - 7 - cyan
## - 8 - white
## - 9 - end of current color
##
## Note: colors can be nested.
##
#
#song_list_format = "{%a - }{%t}|{$8%f$9}$R{$3(%l)$9}"
song_list_format = " {$1%a $2>$9 }{$3{%t}|{%f}}"
#
#song_status_format = "{{%a{ \"%b\"{ (%y)}} - }{%t}}|{%f}"
song_status_format = "{{$3{%t}|{%f}$9}{ $1by $7%a$9}}"
#
#song_library_format = "{%n - }{%t}|{%f}"
song_library_format = "{%n - }{%t}|{%f}"
#
#tag_editor_album_format = "{(%y) }%b"
tag_editor_album_format = "{(%y) }%b"
#
##
## Note: Below variables are used for sorting songs in browser.
## The sort mode determines how songs are sorted, and can be used
## in combination with a sort format to specify a custom sorting format.
## Possible values for browser_sort_mode are "name", "mtime" and "format".
##
#
#browser_sort_mode = "name"
browser_sort_mode = "name"
#
#browser_sort_format = "{%a - }{%t}|{%f} {(%l)}"
browser_sort_format = "{%a - }{%t}|{%f} {(%l)}"
#
##
## Note: Below variables are for alternative version of user's interface.
## Their syntax supports all tags and colors listed above plus some extra
## markers used for text attributes. They are followed by character '$'.
## After that you can put:
##
## - b - bold text
## - u - underline text
## - r - reverse colors
## - a - use alternative character set
##
## If you don't want to use an attribute anymore, just put it again, but
## this time insert character '/' between '$' and attribute character,
## e.g. {$b%t$/b}|{$r%f$/r} will display bolded title tag or filename
## with reversed colors.
##
#
alternative_header_first_line_format = "$b$1$amqq$/a$9 $3{%t}|{%f}$9 $1$aqqj$/a$9$/b"
#
alternative_header_second_line_format = "{{$/b$3%b$9} {$/b$8by$9 $5%a$9}}"
#
##
## Note: Below variables also supports
## text attributes listed above.
##
#
now_playing_prefix = "$1$b $9"
#
#now_playing_suffix = "$9$/b"
now_playing_suffix = "$9$/b"
#
browser_playlist_prefix = "$2playlist$9 "
#
selected_item_prefix = "$b$3"
#
selected_item_suffix = "$9$/b"
#
modified_item_prefix = "$3> $9"
#
## colors are not supported for below variable
#
#song_window_title_format = "{%a - }{%t}|{%f}"
song_window_title_format = "{{{%t}|{%f}}{ by %a}}"
#song_window_title_format = "{{{%t}|{%f}}}"
#
##### columns settings #####
##
## syntax of song columns list format is "column column etc."
##
## - syntax for each column is:
##
## (width of column)[column's color]{displayed tag}
##
## Note: Width is by default in %, if you want a column to
## have fixed size, add 'f' after the value, e.g. (10)[white]{a}
## will be the column that take 10% of screen (so the real column's
## width will depend on actual screen size), whereas (10f)[white]{a}
## will take 10 terminal cells, no matter how wide the screen is.
##
## - color is optional (if you want the default one, type [])
##
## Note: You can give a column additional attributes by putting appropriate
## character after displayed tag character. Available attributes are:
##
## - r - column will be right aligned
## - E - if tag is empty, empty tag marker won't be displayed
##
## You can also:
##
## - give a column custom name by putting it after attributes,
##   separated with character ':', e.g. {lr:Length} gives you
##   right aligned column of lengths named "Length".
##
## - define sequence of tags, that have to be displayed in case
##   predecessor is empty in a way similar to the one in classic
##   song format, i.e. using '|' character, e.g. {a|c|p:Owner}
##   creates column named "Owner" that tries to display artist
##   tag and then composer and performer if previous ones are
##   not available.
##
#
song_columns_list_format = "(3f)[black]{} (39)[black]{t|f} (5f)[black]{lr}"
#song_columns_list_format = "(3f)[black]{} (39)[black]{t|f} (23)[black]{a} (28)[black]{b} (6f)[black]{l}"
#
##### various settings #####
#
##
## Note: Custom command that will be executed each
## time song changes. Useful for notifications etc.
##
## Attention: It doesn't support song format anymore.
## Use `ncmpcpp --now-playing SONG_FORMAT` instead.
##
execute_on_song_change = ""
#
playlist_show_remaining_time = "no"
#
playlist_shorten_total_times = "no"
#
playlist_separate_albums = "no"
#
playlist_display_mode = "columns" (classic/columns)
#
browser_display_mode = "columns" (classic/columns)
#
search_engine_display_mode = "columns" (classic/columns)
#
playlist_editor_display_mode = "columns" (classic/columns)
#
discard_colors_if_item_is_selected = "yes"
#
incremental_seeking = "yes"
#
seek_time = "1"
#
volume_change_step = "1"
#
autocenter_mode = "yes"
#
centered_cursor = "no"
#
##
## Note: You can specify third character which will
## be used to build 'empty' part of progressbar.
##
progressbar_look = ""
#
progressbar_boldness = "no"
#
default_place_to_search_in = "database" (database/playlist)
#
user_interface = "classic" (classic/alternative)
#
media_library_left_column = "a" (possible values: a,y,g,c,p, legend above)
#
default_find_mode = "wrapped" (wrapped/normal)
#
default_space_mode = "add" (add/select)
#
default_tag_editor_pattern = "%n - %t"
#
header_visibility = "no"
#
statusbar_visibility = "no"
#
titles_visibility = "no"
#
header_text_scrolling = "no"
#
#fancy_scrolling = "yes"
#
cyclic_scrolling = "yes"
#
lines_scrolled = "1"
#
follow_now_playing_lyrics = "no"
#
fetch_lyrics_for_current_song_in_background = "no"
#
store_lyrics_in_song_dir = "no"
#
generate_win32_compatible_filenames = "no"
#
##
## Note: If you set this variable, ncmpcpp will try to
## get info from last.fm in language you set and if it
## fails, it will fall back to english. Otherwise it will
## use english the first time.
##
## Note: Language has to be expressed as an ISO 639 alpha-2 code.
##
lastfm_preferred_language = ""
#
ncmpc_like_songs_adding = "yes" (enabled - add/remove, disabled - always add)
#
show_hidden_files_in_local_browser = "no"
#
#display_screens_numbers_on_start = "yes"
#
##
## How shall key_screen_switcher work?
##
## - "previous" - switch between current and last used screen
## - "sequence: 2 -> 9 -> 5" - switch between given sequence of screens.
##
## Screen numbers you can use after 'sequence' keyword are:
##
## - 1 - help
## - 2 - playlist
## - 3 - browser
## - 4 - search engine
## - 5 - media library
## - 6 - playlist editor
## - 7 - tag editor
## - 8 - outputs
## - 9 - visualizer
## - 10 - clock
##
## As you can see, above example will switch between
## playlist, visualizer and media library screens.
##
screen_switcher_mode = "sequence: 2 -> 3"
#
##
## Default width of locked screen (in %).
## Acceptable values are from 20 to 80.
##
#
locked_screen_width_part = "50"
#
ask_for_locked_screen_width_part = "no"
#
##
## Note: You can define startup screen for ncmpcpp
## by choosing screen number from the list above.
##
startup_screen = "2"
#
jump_to_now_playing_song_at_start = "yes"
#
ask_before_clearing_main_playlist = "yes"
#
clock_display_seconds = "no"
#
display_volume_level = "no"
#
display_bitrate = "no"
#
display_remaining_time = "no"
#
regular_expressions = "none" (none/basic/extended)
#
##
## Note: If below is enabled, ncmpcpp will ignore leading
## "The" word while sorting items in browser, tags in
## media library, etc.
##
ignore_leading_the = "yes"
#
block_search_constraints_change_if_items_found = "yes"
#
mouse_support = "no"
#
mouse_list_scroll_whole_page = "no"
#
empty_tag_marker = ""
#
tags_separator = " | "
#
tag_editor_extended_numeration = "no"
#
media_library_sort_by_mtime = "no"
#
enable_window_title = "no"
#
##
## Note: You can choose default search mode for search
## engine. Available modes are:
##
## - 1 - use mpd built-in searching (no regexes, pattern matching)
## - 2 - use ncmpcpp searching (pattern matching with support for regexes,
##       but if your mpd is on a remote machine, downloading big database
##       to process it can take a while
## - 3 - match only exact values (this mode uses mpd function for searching
##       in database and local one for searching in current playlist)
##
#
search_engine_default_search_mode = "1"
#
external_editor = "vim"
#
use_console_editor = "yes" (set to yes, if your editor is console app)
#
##### colors definitions #####
#
colors_enabled = "yes"
#
empty_tag_color = "cyan"
#
header_window_color = "default"
#
volume_color = "black"
#
state_line_color = "default"
#
state_flags_color = "default"
#
main_window_color = "black"
#
color1 = "green"
#
color2 = "yellow"
#
main_window_highlight_color = "cyan"
#
progressbar_color = "black"
#
progressbar_elapsed_color = "red"
#
statusbar_color = "white"
#
alternative_ui_separator_color = "black"
#
active_column_color = "red"
#
visualizer_color = "cyan"
#
window_border_color = "black"
#
active_window_border = "red"
#
